import streams

import ../utils

type
  NavData* = ref object
    vertices*: seq[XYZ]
    edges*: seq[(int16, int16)]

# implemented from https://github.com/PeechezNCreem/navwiz/
# this licence covers the below function
# Boost Software License - Version 1.0 - August 17th, 2003
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
proc parseNavData*(file_data: string): NavData =
  var data_stream = newStringStream(file_data)

  var
    vertex_count = data_stream.readInt16()
    vertex_max = data_stream.readInt16()
  discard data_stream.readInt16() # unknown

  var idx = 0
  while idx <= vertex_max - 1:
    let
      x = data_stream.readFloat32()
      y = data_stream.readFloat32()
      z = data_stream.readFloat32()
      vertex_index = data_stream.readInt16()

    if vertex_index != idx:
      dec vertex_max
    else:
      result.vertices.add(initXYZ(x, y, z))
      inc idx
  
  let edge_count = data_stream.readInt32()
  for i in 0 ..< edge_count:
    let
      start = data_stream.readInt16()
      stop = data_stream.readInt16()

    result.edges.add((start, stop))

